name: Tiles deploy
run-name: ${{ github.actor }} is deploying tiles
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: environment
        required: true
      kb-version:
        description: 'KB version'
        default: 'master'
        required: true
jobs:
  main:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-north-1
          aws-access-key-id: ${{ secrets.AWS_S3_TILES_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_S3_TILES_SECRET_ACCESS_KEY }}

      - name: Checkout [secret-spot-deploy] current branch
        uses: actions/checkout@v4
        with:
          path: builder
      - name: Checkout [secret-spot-kb] version [${{ inputs.kb-version }}]
        uses: actions/checkout@v4
        with:
          repository: ro-ro-by/secret-spot-kb
          ref: ${{ inputs.kb-version }}
          token: ${{ secrets.GIT_PAT }}
          path: data/kb
      - name: Run containers
        run: |
          cp builder/tiles-deploy/docker-compose.yaml docker-compose.yaml
          docker compose up -d

      #####
      # Preparing data
      #####
      - name: Packing KB
        run:  docker compose exec kb-tool bin/cli kb:repo:pack input/kb input/kb.yaml
      - name: Export KB to [PostGIS]
        run:  docker compose exec kb-tool php -dmemory_limit=-1 bin/cli renderer:db:create input/kb.yaml

      #####
      # Raster tiles deploying
      #####
      - name: Generating raster tiles via [Mapnik]
        run: docker compose exec mapnik-renderer python render.py 1 11 /app/tiles/
      - name: Cleaning up empty tiles
        run: |
          find output/tiles/raster/ -type f | wc -l
          find output/tiles/raster/ -size 116c | wc -l
          find output/tiles/raster/ -size 116c | sudo xargs rm
      - name: Raster tiles count
        run: find output/tiles/raster/ -type f | wc -l
      - name: Upload raster tiles to S3 bucket
        run: |
          aws s3 sync --delete ./output/tiles/raster s3://by-secret-spot-wms-tiles/${{ inputs.kb-version }}/raster/base

      #####
      # Vector tiles deploying
      #####
      - name: Building source GeoJSON from [PostGIS]
        run: |
          docker compose exec db psql postgres postgres -tq -c "SELECT json_build_object(
              'type', 'FeatureCollection',
              'features', json_agg(ST_AsGeoJSON(q.*)::json)
              )
          FROM (
          select id, short_id, type, title, ST_Transform(location, 4326) as g from points
          ) as q;" > data/kb-items.geojson
      - name: Building vector tiles via [tippecanoe]
        run: |
          docker compose exec tippecanoe-renderer tippecanoe -e /app/tiles -Z5 -z11 -pC -r1 -pk -pf /app/input/kb-items.geojson --force
      - name: Vector tiles count
        run: find output/tiles/vector/ -type f | wc -l
      - name: Upload vector tiles to S3 bucket
        run: |
          aws s3 sync --delete ./output/tiles/vector s3://by-secret-spot-wms-tiles/${{ inputs.kb-version }}/vector/base
